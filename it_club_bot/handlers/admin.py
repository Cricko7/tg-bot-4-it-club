from aiogram import Router, types, Bot, F
from aiogram.filters import Command, Filter
from handlers.admin_utils import get_admin_keyboard, ADMIN_IDS

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from services.db import AsyncDB

router = Router()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ ID ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏
ADMIN_IDS = {1185406379, 780183740, 5612474540}

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
class AdminFilter(Filter):
    def __init__(self, admin_ids: set):
        self.admin_ids = admin_ids

    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id in self.admin_ids

admin_filter = AdminFilter(admin_ids=ADMIN_IDS)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("adminpanel"), admin_filter)
async def admin_panel(message: types.Message, db: AsyncDB):
    async with db.conn.execute("SELECT COUNT(*) FROM registrations") as cursor:
        total_users = (await cursor.fetchone())[0]

    async with db.conn.execute("SELECT COUNT(*) FROM teams") as cursor:
        total_teams = (await cursor.fetchone())[0]

    query = """
        SELECT COUNT(*) FROM registrations r
        LEFT JOIN teams_members tm ON r.user_id = tm.user_id
        WHERE tm.user_id IS NULL
    """
    async with db.conn.execute(query) as cursor:
        users_without_team = (await cursor.fetchone())[0]

    stat_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:\n\n"
        f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: {total_teams}\n"
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã: {users_without_team}"
    )
    await message.answer(stat_text)


@router.callback_query(F.data.startswith("admin_"))
async def admin_callbacks(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    if callback.data == "admin_stat":
        await callback.message.edit_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 42\n... (–ø—Ä–∏–º–µ—Ä)")
    elif callback.data == "admin_users":
        await callback.message.edit_text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n1. User1\n2. User2\n3. User3\n...")
    elif callback.data == "admin_exit":
        await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    await callback.answer()

# INLINE –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ó–ê–Ø–í–û–ö
def get_application_kb(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
            InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{user_id}")
        ]
    ])

@router.message(Command("check_applications"), admin_filter)
async def check_applications(message: types.Message, db: AsyncDB):
    async with db.conn.execute("SELECT user_id, name FROM registrations WHERE status='pending'") as cursor:
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    for user_id, name in rows:
        kb = get_application_kb(user_id)
        await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç {name} (ID: {user_id})", reply_markup=kb)

@router.callback_query(F.data.startswith("approve:"), admin_filter)
async def approve_request(call: CallbackQuery, db: AsyncDB, bot: Bot):
    user_id = int(call.data.split(":")[1])
    await db.conn.execute("UPDATE registrations SET status = 'approved' WHERE user_id = ?", (user_id,))
    await db.conn.commit()

    group_link = "https://t.me/c/3018144642/1"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ: {group_link}")
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ø—Ä–∏–Ω—è—Ç–∞.")
    await call.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")

@router.callback_query(F.data.startswith("reject:"), admin_filter)
async def reject_request(call: CallbackQuery, db: AsyncDB):
    user_id = int(call.data.split(":")[1])
    await db.conn.execute("UPDATE registrations SET status = 'rejected' WHERE user_id = ?", (user_id,))
    await db.conn.commit()

    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

@router.callback_query(F.data.startswith("details:"), admin_filter)
async def show_application_details(callback: CallbackQuery, db: AsyncDB):
    user_id = int(callback.data.split(":")[1])
    async with db.conn.execute("SELECT user_id, name, group_name, stack, status FROM registrations WHERE user_id = ?", (user_id,)) as cursor:
        row = await cursor.fetchone()
    if not row:
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞ —Å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_id, name, group_name, stack, status = row
    text = (
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏:\n"
        f"ID: {user_id}\n"
        f"–§–ò–û: {name}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"–°—Ç–µ–∫: {stack}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )
    await callback.message.answer(text)
    await callback.answer()
